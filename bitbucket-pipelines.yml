options:
  docker: true

definitions:
  updateOS: &update
    apt-get update
  printVersion: &version
    node --version && npm --version
  confBuildx: &buildx
    docker --version &&
    docker pull docker/buildx-bin:latest &&
    docker container create --name buildx docker/buildx-bin:latest docker buildx version &&
    mkdir -p /usr/libexec/docker/cli-plugins/ &&
    docker container cp buildx:/buildx /usr/libexec/docker/cli-plugins/docker-buildx &&
    docker run --rm --privileged multiarch/qemu-user-static --reset -p yes &&
    docker buildx create --use &&
    docker buildx version
  awsEcrLogin: &ecrlogin
    aws ecr get-login-password | docker login --password-stdin --username AWS "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
  buildApp: &appcontainer
    docker buildx build --push --platform linux/arm64 --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${ENV} -f Dockerfile .
  buildProxyWeb: &proxywebcontainer
    sed -i='' -e "s|<SERVER_NAME>|${SERVER_NAME_WEB}|" proxy/conf.d/web.conf &&
    sed -i='' -e "s|<SERVER_NAME>|${SERVER_NAME_WEB}|" proxy/conf.d/default.conf &&
    docker buildx build --push --platform linux/arm64 --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROXY_REPOSITORY}:${ENV} -f proxy/Dockerfile ./proxy
  build: &build
    CI=false NEXT_PUBLIC_ENV=$NEXT_PUBLIC_ENV NEXT_PUBLIC_SITE24X7_KEY=$NEXT_PUBLIC_SITE24X7_KEY NEXT_PUBLIC_SENTRY_DSN=$NEXT_PUBLIC_SENTRY_DSN npm run build
  steps:
    - step: &test
        name: Test
        image: node:16
        runs-on:
          - 'self.hosted'
          - 'linux'
          - 'web'
        size: 1x
        script:
          - *update
          - *version
          - npm install --no-audit
          #- npm run test
        artifacts:
          - node_modules/**
pipelines:
  custom:
    deploy-to-testnet:
      - step: *test
      - step:
          name: Build
          image: node:16
          deployment: TestnetBuildStep
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 2x
          script:
            - *update
            - *version
            # RPC config
            - cp -p ./src/Assets/networks/rpc_config_testnet.json ./src/Assets/networks/rpc_config.json
            # Build frontend
            - *build
          artifacts:
            - .next/**
      - step:
          name: Upload to S3
          image: amazon/aws-cli
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          artifacts:
            download: false
          # Copy RPC config to Admin S3 Bucket
          script:
            - aws s3 cp ./src/Assets/networks/rpc_config_testnet.json s3://test-ebisusbay-admin-storage/rpc_config.json
      - step:
          name: Build containers
          image: amazon/aws-cli
          deployment: Testnet
          services:
            - docker
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            # Install and configure Docker Buildx
            - *buildx
            # Login to ECR
            - *ecrlogin
            # Build container images and push to ECR repositorys and push to ECR repository
            - *appcontainer
            - *proxywebcontainer
      - step:
          name: Deploy
          image: alpine:latest
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          artifacts:
            download: false
          clone:
            enabled: false
          script:
            # deploy test-ebisusbay-web-arm64-us-east-1 / testapp.ebisusbay.biz
            - apk add --no-cache curl
            - 'curl -X POST -is -H "Authorization: Basic ${BITBUCKET_API_KEY}" -H "Content-Type: application/json" -d "{\"target\":{\"ref_type\":\"branch\",\"type\":\"pipeline_ref_target\",\"ref_name\":\"testnet\"}}" https://api.bitbucket.org/2.0/repositories/ebisusbay/eb_web_deploy/pipelines/'
    deploy-to-sandbox:
      - step: *test
      - step:
          name: Build
          image: node:16
          deployment: SandboxBuildStep
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 2x
          script:
            - *update
            - *version
            # RPC config
            - cp -p ./src/Assets/networks/rpc_config_dev.json ./src/Assets/networks/rpc_config.json
            # Build frontend
            - *build
          artifacts:
            - .next/**
      - step:
          name: Upload to S3
          image: amazon/aws-cli
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          artifacts:
            download: false
          # Copy RPC config to Admin S3 Bucket
          script:
            - aws s3 cp ./src/Assets/networks/rpc_config_dev.json s3://dev-ebisusbay-admin-storage/rpc_config.json
      - step:
          name: Build containers
          image: amazon/aws-cli
          deployment: Sandbox
          services:
            - docker
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            # Install and configure Docker Buildx
            - *buildx
            # Login to ECR
            - *ecrlogin
            # Build container images and push to ECR repositorys and push to ECR repository
            - *appcontainer
            - *proxywebcontainer
      - step:
          name: Deploy
          image: alpine:latest
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          artifacts:
            download: false
          clone:
            enabled: false
          script:
            # deploy sandbox-ebisusbay-web-arm64-us-east-1 / sandboxapp.ebisusbay.biz
            - apk add --no-cache curl
            - 'curl -X POST -is -H "Authorization: Basic ${BITBUCKET_API_KEY}" -H "Content-Type: application/json" -d "{\"target\":{\"ref_type\":\"branch\",\"type\":\"pipeline_ref_target\",\"ref_name\":\"sandbox\"}}" https://api.bitbucket.org/2.0/repositories/ebisusbay/eb_web_deploy/pipelines/'
  branches:
    dev:
      - step: *test
      - step:
          name: Build
          image: node:16
          deployment: DevelopmentBuildStep
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 2x
          script:
            - *update
            - *version
            # RPC config
            - cp -p ./src/Assets/networks/rpc_config_dev.json ./src/Assets/networks/rpc_config.json
            # Build frontend
            - *build
          artifacts:
            - .next/**
      - step:
          name: Upload to S3
          image: amazon/aws-cli
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          # Copy RPC config to Admin S3 Bucket
          script:
            - aws s3 cp ./src/Assets/networks/rpc_config_dev.json s3://dev-ebisusbay-admin-storage/rpc_config.json
      - step:
          name: Build containers
          image: amazon/aws-cli
          deployment: Development
          services:
            - docker
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            # Install and configure Docker Buildx
            - *buildx
            # Login to ECR
            - *ecrlogin
            # Build container images and push to ECR repositorys and push to ECR repository
            - *appcontainer
            - *proxywebcontainer
      - step:
         name: Deploy
         image: alpine:latest
         runs-on:
           - 'self.hosted'
           - 'linux'
           - 'web'
         size: 1x
         clone:
           enabled: false
         script:
           # deploy dev-ebisusbay-web-arm64-us-east-1 / app.ebisusbay.biz
           - apk add --no-cache curl
           - 'curl -X POST -is -H "Authorization: Basic ${BITBUCKET_API_KEY}" -H "Content-Type: application/json" -d "{\"target\":{\"ref_type\":\"branch\",\"type\":\"pipeline_ref_target\",\"ref_name\":\"dev\"}}" https://api.bitbucket.org/2.0/repositories/ebisusbay/eb_web_deploy/pipelines/'
    prod:
      - step: *test
      - step:
          name: Build
          image: node:16
          deployment: ProductionBuildStep
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 2x
          script:
            - *update
            - *version
            # Build frontend
            - *build
          artifacts:
            - .next/**
      - step:
          name: Upload to S3
          image: amazon/aws-cli
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          # Copy RPC config to Admin S3 Bucket
          script:
            - aws s3 cp ./src/Assets/networks/rpc_config.json s3://prod-ebisusbay-admin-storage/rpc_config.json
      - step:
          name: Build containers
          image: amazon/aws-cli
          deployment: Production
          services:
            - docker
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            # Install and configure Docker Buildx
            - *buildx
            # Login to ECR
            - *ecrlogin
            # Build container images and push to ECR repositorys and push to ECR repository
            - *appcontainer
            - *proxywebcontainer
      - step:
         name: Deploy
         image: alpine:latest
         runs-on:
           - 'self.hosted'
           - 'linux'
           - 'web'
         size: 1x
         clone:
           enabled: false
         script:
           # deploy prod-ebisusbay-web-arm64-us-east-1 / app.ebisusbay.com
           - apk add --no-cache curl
           - 'curl -X POST -is -H "Authorization: Basic ${BITBUCKET_API_KEY}" -H "Content-Type: application/json" -d "{\"target\":{\"ref_type\":\"branch\",\"type\":\"pipeline_ref_target\",\"ref_name\":\"prod\"}}" https://api.bitbucket.org/2.0/repositories/ebisusbay/eb_web_deploy/pipelines/'
definitions:
  services:
    docker:
      # default memory is 1024MB
      memory: 3072
      image: docker:dind
