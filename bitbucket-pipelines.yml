options:
  docker: true

definitions:
  updateOS: &update
    apt-get update
  printVersion: &version
    node --version && npm --version
  confBuildx: &buildx
    docker --version &&
    docker pull docker/buildx-bin:latest &&
    docker container create --name buildx docker/buildx-bin:latest docker buildx version &&
    mkdir -p /usr/libexec/docker/cli-plugins/ &&
    docker container cp buildx:/buildx /usr/libexec/docker/cli-plugins/docker-buildx &&
    docker run --rm --privileged multiarch/qemu-user-static --reset -p yes &&
    docker buildx create --use &&
    docker buildx version
  awsEcrLogin: &ecrlogin
    aws ecr get-login-password | docker login --password-stdin --username AWS "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
  buildApp: &appcontainer
    docker buildx build --push --platform linux/arm64 --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${APP_REPOSITORY}:${ENV} -f Dockerfile .
  buildProxyWeb: &proxywebcontainer
    sed -i='' -e "s|<SERVER_NAME>|${SERVER_NAME_WEB}|" proxy/conf.d/web.conf &&
    sed -i='' -e "s|<SERVER_NAME>|${SERVER_NAME_WEB}|" proxy/conf.d/default.conf &&
    docker buildx build --push --platform linux/arm64 --tag ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${PROXY_REPOSITORY}:${ENV} -f proxy/Dockerfile ./proxy
  build: &build
    #CI=false REACT_APP_DEVTOOLS=$REACT_APP_DEVTOOLS REACT_APP_SITE24X7_KEY=$REACT_APP_SITE24X7_KEY REACT_APP_SENTRY_DSN=$REACT_APP_SENTRY_DSN npm run build
    CI=false npm run build
  steps:
    - step: &test
        name: Test
        image: node:16
        runs-on:
          - 'self.hosted'
          - 'linux'
          - 'web'
        size: 1x
        script:
          - *update
          - *version
          - npm install --no-audit
          #- npm run test
        artifacts:
          - node_modules/**
    - step: &deploy
        name: Deploy
        image: amazon/aws-cli
        deployment: changethis
        runs-on:
          - 'self.hosted'
          - 'linux'
          - 'web'
        size: 1x
        #trigger: manual
        clone:
          enabled: false
        script:
          # AWS S3 deploy
          - pipe: atlassian/aws-s3-deploy:1.1.0
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              S3_BUCKET: $S3_BUCKET
              LOCAL_PATH: 'build'
              DELETE_FLAG: 'true'
          # Custom No-Store metadata for index.html
          - aws s3 cp build/index.html s3://${S3_BUCKET}/index.html --metadata-directive REPLACE --cache-control No-Store
          # AWS CloudFront create invalidation
          - pipe: atlassian/aws-cloudfront-invalidate:0.6.0
            variables:
              AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
              AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
              AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
              DISTRIBUTION_ID: $CF_DIST_ID
              PATHS: '/*'
pipelines:
  branches:
    dev:
      - step: *test
      - step:
          name: Build
          image: node:16
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 2x
          script:
            - *update
            - *version
            # RPC config
            - cp -p ./src/Assets/networks/rpc_config_dev.json ./src/Assets/networks/rpc_config.json
            # Build frontend
            - *build
          artifacts:
            - .next/**
      - step:
          name: Upload to S3
          image: amazon/aws-cli
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          # Copy RPC config to Admin S3 Bucket
          script:
            - aws s3 cp ./src/Assets/networks/rpc_config_dev.json s3://dev-ebisusbay-admin-storage/rpc_config.json
      - step:
          name: Build containers
          image: amazon/aws-cli
          deployment: Development
          services:
            - docker
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            # Install and configure Docker Buildx
            - *buildx
            # Login to ECR
            - *ecrlogin
            # Build container images and push to ECR repositorys and push to ECR repository
            - *appcontainer
            - *proxywebcontainer
      - step:
         name: Deploy
         image: alpine:latest
         runs-on:
           - 'self.hosted'
           - 'linux'
           - 'web'
         size: 1x
         clone:
           enabled: false
         script:
           # deploy dev-ebisusbay-web-arm64-us-east-1 / app.ebisusbay.biz
           - apk add --no-cache curl
           - 'curl -X POST -is -H "Authorization: Basic ${BITBUCKET_API_KEY}" -H "Content-Type: application/json" -d "{\"target\":{\"ref_type\":\"branch\",\"type\":\"pipeline_ref_target\",\"ref_name\":\"dev\"}}" https://api.bitbucket.org/2.0/repositories/ebisusbay/eb_web_deploy/pipelines/'
definitions:
  services:
    docker:
      # default memory is 1024MB
      memory: 3072
      image: docker:dind
