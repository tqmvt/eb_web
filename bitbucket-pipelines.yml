pipelines:
  # default:
  #   - step:
  #       name: Integration test
  #       image: node:16
  #       runs-on:
  #         - 'self.hosted'
  #         - 'linux'
  #         - 'web'
  #       size: 1x
  #       script:
  #         - apt-get update
  #         - node --version
  #         - npm install --no-audit
  #         #- npm run test
  custom: # Pipelines that can only be triggered manually or by schedule
    deploy-to-sandbox:
      - step:
          name: Integration test
          image: node:16
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            - apt-get update
            - node --version
            - npm install --no-audit
            #- npm run test
          artifacts:
            - node_modules/**
      - step:
          name: Build
          image: node:16
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            - apt-get update
            # Set environment variables
            - REACT_APP_DEVTOOLS=true
            # Print Node.js version
            - node --version
            # Print npm version
            - npm --version
            # RPC config
            - cp -p ./src/Assets/networks/rpc_config_dev.json ./src/Assets/networks/rpc_config.json
            # Build frontend
            - CI=false npm run build
          artifacts:
            - build/**
      - step:
          name: Deploy
          image: amazon/aws-cli
          deployment: Sandbox
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            # Print AWS CLI version
            - aws --version
            # Deployment
            - aws s3 sync build/ s3://${S3_BUCKET} --delete
            - aws s3 cp build/index.html s3://${S3_BUCKET}/index.html --metadata-directive REPLACE --cache-control No-Store
            - aws cloudfront create-invalidation --distribution-id ${CF_DIST_ID} --paths "/404.html" "/asset-manifest.json" "/index.html" "/manifest.json" "/robots.txt" "/static/*" "/tos.html" "/vector*"
  branches:
    testnet:
      - step:
          name: Integration test
          image: node:16
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            - apt-get update
            - node --version
            - npm install --no-audit
            #- npm run test
          artifacts:
            - node_modules/**
      - step:
          name: Build
          image: node:16
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            - apt-get update
            # Set environment variables
            - REACT_APP_DEVTOOLS=true
            # Print Node.js version
            - node --version
            # Print npm version
            - npm --version
            # RPC config
            - cp -p ./src/Assets/networks/rpc_config_testnet.json ./src/Assets/networks/rpc_config.json
            # Build frontend
            - CI=false npm run build
          artifacts:
            - build/**
      - step:
          name: Deploy
          image: amazon/aws-cli
          deployment: Testnet
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            #- ([[ "$BITBUCKET_BRANCH" == "testnet" ]]) || (echo "This build should only be run on testnet" && exit 1)
            # Print AWS CLI version
            - aws --version
            # Deployment
            - aws s3 sync build/ s3://${S3_BUCKET} --delete
            - aws s3 cp build/index.html s3://${S3_BUCKET}/index.html --metadata-directive REPLACE --cache-control No-Store
            - aws cloudfront create-invalidation --distribution-id ${CF_DIST_ID} --paths "/404.html" "/asset-manifest.json" "/index.html" "/manifest.json" "/robots.txt" "/static/*" "/tos.html" "/vector*"
    dev:
      - step:
          name: Test
          image: node:16
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            - apt-get update
            - node --version
            - npm install --no-audit
            #- npm run test
          artifacts:
            - node_modules/**
      - step:
          name: Build
          image: node:16
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            - apt-get update
            # Set environment variables
            - REACT_APP_DEVTOOLS=true
            # Print Node.js version
            - node --version
            # Print npm version
            - npm --version
            # RPC config
            - cp -p ./src/Assets/networks/rpc_config_dev.json ./src/Assets/networks/rpc_config.json
            # Build frontend
            - CI=false npm run build
          artifacts:
            - build/**
      - step:
          name: Deploy
          image: amazon/aws-cli
          deployment: Development
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          #trigger: manual
          clone:
            enabled: false
          script:
            # AWS S3 deploy
            - pipe: atlassian/aws-s3-deploy:1.1.0
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                S3_BUCKET: $S3_BUCKET
                LOCAL_PATH: 'build'
                DELETE_FLAG: 'true'
            # Custom No-Store metadata for index.html
            - aws s3 cp build/index.html s3://${S3_BUCKET}/index.html --metadata-directive REPLACE --cache-control No-Store
            # AWS CloudFront create invalidation
            - pipe: atlassian/aws-cloudfront-invalidate:0.6.0
              variables:
                AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
                AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
                AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
                DISTRIBUTION_ID: $CF_DIST_ID
                PATHS: '/img/* /mock_data/* /static/* /404.html /android-chrome-192x192.png /android-chrome-512x512.png /apple-touch-icon.png /asset-manifest.json /browserconfig.xml /favicon-16x16.png /favicon-32x32.png /favicon.ico /index.html /manifest.json /mstile-150x150.png /robots.txt /safari-pinned-tab.svg /site.webmanifest /tos.html /vector-face.svg'
    prod:
      - step:
          name: Integration test
          image: node:16
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            - apt-get update
            - node --version
            - npm install --no-audit
            #- npm run test
          artifacts:
            - node_modules/**
      - step:
          name: Build
          image: node:16
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            - apt-get update
            # Set environment variables
            - REACT_APP_DEVTOOLS=false
            # Print Node.js version
            - node --version
            # Print npm version
            - npm --version
            # Build frontend
            - CI=false npm run build
          artifacts:
            - build/**
      - step:
          name: Deploy
          image: amazon/aws-cli
          deployment: Production
          runs-on:
            - 'self.hosted'
            - 'linux'
            - 'web'
          size: 1x
          script:
            #- ([[ "$BITBUCKET_BRANCH" == "prod" ]]) || (echo "This build should only be run on prod" && exit 1)
            # Print AWS CLI version
            - aws --version
            # Deployment
            - aws s3 sync build/ s3://${S3_BUCKET} --delete
            - aws s3 cp build/index.html s3://${S3_BUCKET}/index.html --metadata-directive REPLACE --cache-control No-Store
            - aws cloudfront create-invalidation --distribution-id ${CF_DIST_ID} --paths "/404.html" "/asset-manifest.json" "/index.html" "/manifest.json" "/robots.txt" "/static/*" "/tos.html" "/vector*"
